package com.me1.mygdxgame;



import java.util.Random;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.Vector3;

public class GameScreen implements Screen{

	MyGame game;
	
	OrthographicCamera camera;
	
	SpriteBatch batch;
	
	float stateTime;
	
	

	
	Random rand;
	
	boolean appeared;
	
	int holder;
	
	Vector3 touch;
	
	Bill bill;
	
	Obstacle obstacle;
	
	Obstacle obstacle2;
	
	Obstacle obstacle3;
	
	Obstacle obstacle4;
	
	Obstacle obstacle5;
	
	long startTime;
	
	long estimatedTime;

	boolean repeat;
	
	boolean startover1;
	boolean startover2;
	boolean startover3;
	boolean startover4;
	boolean startover5;
	

	

	
	public GameScreen(MyGame game){
		this.game = game;
		
		rand = new Random();
		
		camera = new OrthographicCamera();
		
		camera.setToOrtho(true, 1920,1080);
		
		batch = new SpriteBatch();
		
		touch = new Vector3();
		
		stateTime = 0F;
		
		holder =0;
		
		bill = new Bill();
		
		obstacle = new Obstacle();
		
		obstacle2 = new Obstacle();
		
		obstacle3 = new Obstacle();
		
		obstacle4 = new Obstacle();
		
		obstacle5 = new Obstacle();
		
		startTime = System.nanoTime();
		
		startover1 = false;
		startover2 = false;
		startover3 = false;
		startover4 = false;
		startover5 = false;
		


		

		

		
	}
	
	@Override
	public void render(float delta) {
		Gdx.gl.glClearColor(1F,1F,1F,1F);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
		
		
		
		camera.update();
		generalUpdate(touch, camera);
		obstacleUpdate();
		obstacle2Update();
		obstacle3Update();
		obstacle4Update();
		obstacle5Update();
		
		stateTime += Gdx.graphics.getDeltaTime();
		
		Assets.current_frame = Assets.loading_animation.getKeyFrame(stateTime, true);
		
		batch.setProjectionMatrix(camera.combined);
		
		batch.begin();
		
			batch.draw(Assets.current_frame, 256,256);
			
			batch.draw(bill.image, bill.bounds.x, bill.bounds.y);
			
			if (obstacle.counter ==0 ){
				obstacle.bounds.y = rand.nextInt(952);
				obstacle.counter++;
			}
			
			batch.draw(obstacle.image, obstacle.bounds.x, obstacle.bounds.y);

			
			estimatedTime = (System.nanoTime() - startTime)/1000000000;
			

			/*****checks if the lapsed time is divisible by 3 ******/
			if (((estimatedTime % 3 == 0) && (estimatedTime != 0)) || (startover1 == true)){
				System.out.println("time is divisible of three !!");
				startTime = System.nanoTime();
				startover1 = false;

				
				if ((obstacle2.counter ==0) || (startover2 == true) ){
					obstacle2.bounds.y = rand.nextInt(952);
					obstacle2.counter++;
					obstacle2.bounds.x = 1920;
					System.out.println("obs2 in place");
					startover2 = false;
					
					batch.draw(obstacle.image, obstacle2.bounds.x, obstacle2.bounds.y);
				}
				
				else if ( ((obstacle3.counter ==0) && (obstacle2.counter > 0)) || (startover3 == true) ){
					obstacle3.bounds.y = rand.nextInt(952);
					obstacle3.counter++;
					obstacle3.bounds.x = 1920;
					System.out.println("obs3 in place");
					startover3 = false;
					
					batch.draw(bill.image, obstacle3.bounds.x, obstacle3.bounds.y);
				}
				
				else if ( ((obstacle4.counter ==0) && (obstacle3.counter > 0)) || (startover4 == true) ){
					obstacle4.bounds.y = rand.nextInt(952);
					obstacle4.counter++;
					obstacle4.bounds.x = 1920;
					System.out.println("obs4 in place");
					startover4 = false;
					
					batch.draw(obstacle.image, obstacle4.bounds.x, obstacle4.bounds.y);
				}
				
				else if (((obstacle5.counter ==0) && (obstacle4.counter > 0)) || (startover5 == true) ){
					obstacle5.bounds.y = rand.nextInt(952);
					obstacle5.counter++;
					obstacle5.bounds.x = 1920;
					System.out.println("obs5 in place");
					startover5 = false;
					
					batch.draw(obstacle.image, obstacle5.bounds.x, obstacle5.bounds.y);
					
					
					
				}
				
			}
			

			/********************************************************/
			
			if (obstacle2.counter > 0){
				batch.draw(obstacle.image, obstacle2.bounds.x, obstacle2.bounds.y);
			}
			
			if (obstacle3.counter > 0){
				batch.draw(obstacle.image, obstacle3.bounds.x, obstacle3.bounds.y);
			}
			
			if (obstacle4.counter > 0){
				batch.draw(obstacle.image, obstacle4.bounds.x, obstacle4.bounds.y);
			}
			
			if (obstacle5.counter > 0){
				batch.draw(obstacle.image, obstacle5.bounds.x, obstacle5.bounds.y);
			}
			

			
		
		
		batch.end();
		
	}
	
	public void generalUpdate(Vector3 touch, OrthographicCamera camera){
		if(Gdx.input.isTouched()){
			touch.set(Gdx.input.getX(), Gdx.input.getY(), 0);
			camera.unproject(touch);
			bill.bounds.x = (int)touch.x;
			bill.bounds.y = (int)touch.y;
			
		}
		if(bill.bounds.overlaps(obstacle.bounds)){
			System.out.println("COLLISION!!!1");
			
		}
		
		if(bill.bounds.overlaps(obstacle2.bounds)){
			System.out.println("COLLISION!!!2");
			
		}
		
		if(bill.bounds.overlaps(obstacle3.bounds)){
			System.out.println("COLLISION!!!3");
			
		}
		
		if(bill.bounds.overlaps(obstacle4.bounds)){
			System.out.println("COLLISION!!!4");
			
		}
		
		if(bill.bounds.overlaps(obstacle5.bounds)){
			System.out.println("COLLISION!!!5");
			
		}
		
		
	}
	
	public void obstacleUpdate(){
		
		obstacle.bounds.x -= 4;
		if(obstacle.bounds.x < -128){
			startover1 = true;
		}
	}
	
	public void obstacle2Update(){
		
		obstacle2.bounds.x -= 4;
		if(obstacle2.bounds.x < -128){
			startover2 = true;
		}
	}
	
	public void obstacle3Update(){
		
		obstacle3.bounds.x -= 4;
		if(obstacle3.bounds.x < -128){
			startover3 = true;
		}
	}
	
	public void obstacle4Update(){
		
		obstacle4.bounds.x -= 4;
		if(obstacle4.bounds.x < -128){
			startover4 = true;
		}
	}
	
	public void obstacle5Update(){
		
		obstacle5.bounds.x -= 4;
		if(obstacle5.bounds.x < -128){
			startover5 = true;
		}
	}

	@Override
	public void resize(int width, int height) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void show() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void hide() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void pause() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void resume() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void dispose() {
		// TODO Auto-generated method stub
		
	}

}
